{"version":3,"sources":["components/Header.js","components/SearchBox.js","components/GifCard.js","components/GifList.js","containers/App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","SearchBox","_ref","onSearch","type","placeholder","id","value","onClick","GifCard","url","src","alt","href","download","GifList","images","gifArray","map","gif","i","src_components_GifCard","fixed_width","key","console","log","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","gifs","searchInput","fetched","onFormSubmit","bind","assertThisInitialized","_this2","searchResult","document","getElementById","setState","refinedSearch","trim","split","join","fetch","concat","then","response","json","data","length","src_components_Header","src_components_SearchBox","original","components_GifList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_containers_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1b549a1b.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Header.css'\r\n\r\nconst Header = () => {\r\n        return (\r\n            <div className='heading'>\r\n                <h1 className=\"heading-primary--main\">Gifly</h1>\r\n                <p className=\"heading-primary--sub\">Search and download interesting gifs on the internet</p>\r\n            </div>\r\n        )\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport './SearchBox.css'\r\n\r\nconst SearchBox = ({onSearch}) => {\r\n    return (\r\n        <div className=\"searchForm\">\r\n            <input \r\n                type=\"text\"\r\n                placeholder=\"Search gif\"\r\n                id='search'\r\n            />\r\n            <button \r\n                type=\"button\"\r\n                value=\"Search\"\r\n                onClick={onSearch}\r\n            >Search</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox;","import React from \"react\";\r\nimport './GifCard.css';\r\n\r\nconst GifCard = ({url}) => {\r\n    // console.log(url)\r\n    return (\r\n        <div className=\"card\">\r\n            <img src={url} alt=\"gif\" />\r\n            <a href={url} download className=\"download\"><i className=\"fas fa-arrow-down\"></i></a>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GifCard;","import React from \"react\";\r\nimport GifCard from \"./GifCard\";\r\n\r\nconst GifList = ({images}) => {\r\n    const gifArray = images.map((gif,i) => {\r\n        return <GifCard\r\n                    url={gif.images.fixed_width.url}\r\n                    key={i}\r\n                />\r\n    })\r\n    console.log(images)\r\n    return (\r\n        <div className=\"cardWrapper\">\r\n           {gifArray}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GifList;","import React, {Component} from 'react';\r\nimport './App.css';\r\nimport Header from '../components/Header';\r\nimport SearchBox from '../components/SearchBox';\r\nimport GifList from '../components/GifList';\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            gifs: [],\r\n            searchInput: '',\r\n            fetched : 0\r\n        }\r\n        // console.log(this)\r\n        this.onFormSubmit = this.onFormSubmit.bind(this);\r\n    }\r\n\r\n    onFormSubmit () {\r\n        let searchResult = document.getElementById('search').value;\r\n        this.setState({gifs: []})\r\n        // console.log(searchResult);\r\n        // console.log(this);\r\n        let refinedSearch = searchResult.trim().split(' ').join('+');\r\n        fetch(`https://api.giphy.com/v1/gifs/search?q=${refinedSearch}&api_key=NzOQswVIdN6gAYDHUhdhdTMkFMLRsKYB&limit=15`)\r\n        .then(response => {\r\n            return response.json();\r\n        })\r\n        .then(data => {\r\n            this.setState({gifs: data.data,fetched: 2});\r\n            // console.log(this.state.gifs)\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if(this.state.gifs.length < 1) {\r\n            return (\r\n                <div className='tc'>\r\n                    <Header />\r\n                    <SearchBox onSearch = {this.onFormSubmit} />\r\n                </div>\r\n            )\r\n        } else if(this.state.gifs.length < 1 && this.state.fetched === 1 ) {\r\n            return (\r\n                <div className = 'tc'>\r\n                    <Header />\r\n                    <SearchBox onSearch = {this.onFormSubmit} />\r\n                    <h1>Loading... </h1>\r\n                </div>\r\n            )\r\n        }\r\n        console.log(this.state.gifs[0].images.original.url + ' from App')\r\n        return (\r\n            <div className=\"tc\">\r\n                <Header />\r\n                <SearchBox onSearch = {this.onFormSubmit} />\r\n                <GifList images={this.state.gifs}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}